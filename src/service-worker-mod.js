/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

if (workbox) {
  workbox.skipWaiting();
  workbox.clientsClaim();

  // cache name
  workbox.core.setCacheNameDetails({
    prefix: "HelloSW",
    precache: "precache",
    runtime: "runtime",
  });

  // runtime cache
  // 1. css/js/manifest
  workbox.routing.registerRoute(
    new RegExp(".(css|js|json)$"),
    new workbox.strategies.CacheFirst({
      cacheName: "cache-JS/CSS/JSON",
      plugins: [
        new workbox.expiration.Plugin({
          maxAgeSeconds: 60 * 60 * 24 * 7, // cache for one week
          maxEntries: 20, // only cache 20 request
          purgeOnQuotaError: true,
        }),
      ],
    })
  );
  // 2. images
  workbox.routing.registerRoute(
    new RegExp(".(png|svg|jpg|jpeg)$"),
    new workbox.strategies.CacheFirst({
      cacheName: "cache-images",
      plugins: [
        new workbox.expiration.Plugin({
          maxAgeSeconds: 60 * 60 * 24 * 7,
          maxEntries: 50,
          purgeOnQuotaError: true,
        }),
      ],
    })
  );

  // // 3.Google Font
  // workbox.routing.registerRoute(
  //   /^https:\/\/fonts\.googleapis\.com/,
  //   new workbox.strategies.StaleWhileRevalidate({
  //     cacheName: "google-fonts-stylesheets",
  //   })
  // );

  // // 4. cache news articles result
  // workbox.routing.registerRoute(
  //   new RegExp("https://newsapi.org/v2/everything"),
  //   new workbox.strategies.StaleWhileRevalidate({
  //     cacheName: "google-news",
  //     cacheExpiration: {
  //       maxAgeSeconds: 60 * 30, //cache the news content for 30mn
  //     },
  //   })
  // );

  // // 5. network news
  // // Use a stale-while-revalidate strategy for all other requests.
  // workbox.routing.setDefaultHandler(
  //   new workbox.strategies.StaleWhileRevalidate()
  // );

  workbox.core.setLogLevel(workbox.core.LOG_LEVELS.debug);
  workbox.precaching.precacheAndRoute(self.__precacheManifest);
}

